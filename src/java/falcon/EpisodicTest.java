/*
 * EpisodicTest.java
 *
 * Created on August 29, 2009, 12:21 AM
 */

package falcon;

/**
 *
 * @author  WA0003EN
 */


import java.util.*;
import java.io.*;
import java.lang.*;
import javax.swing.Timer; 
import java.awt.event.*;

public class EpisodicTest extends javax.swing.JFrame {
    protected String seqFile="Player_3_seq_learner.ext";
    protected String eventFile="Player_3_event_learner.ext";
    //protected String filePath="D:\\work\\player3\\";
    protected String filePath="/Users/atifsaleem/NetBeansProjects/Falcon_14_05_10_atif/data/";
    //protected String filePath="C:\\Documents and Settings\\User\\Desktop\\My Dropbox\\wenwen\\em-modified\\";
    //protected String filePath=System.getProperty("user.dir")+"\\";
    protected String eventListFile=filePath+"event_Player_3_100.ext";
    protected Vector<Event> events;
    protected Vector<Event> pEvents;
    protected Vector<Event> curPSeq;
    protected Vector<Event> curSeq;
    protected EpisodicModelcc episodic;
    protected int eventIndex;
    
    protected ArrayList seqStartIndexes;
    protected ArrayList seqLenIndexes;
    
    protected int numFieldE = 4; //4 modes 
    protected int lenE [] = {6 ,16, 8, 2}; //i inputs from each mode
    protected double inputE [][] = new double[numFieldE][]; //input vector
    
    protected double betaE [] = {(double)1.0, (double)1.0,(double)1.0, (double)1.0};
    protected double alphaE [] = {(double)0.1, (double)0.1,(double)0.1, (double)0.1};
    //protected double gammaE [] = {(double)0.4, (double)0.2,(double)0.2, (double)0.2};
    protected double gammaE [] = {(double)0.1, (double)0.3,(double)0.3, (double)0.3};
    protected double rhoE [] = {(double) 1, (double)1,(double) 1, (double)1};
    
    protected double betaS = 1.0;
    protected double alphaS = 0.1;
    protected double gammaS = 1.0;
    protected double rhoS = 0.75;
    
    protected boolean isStart=false;
    
    //*****Attribute added by WWW after 02/12/09****
    protected int partialCueLength=0;
    protected boolean partialCueBackwards=false;
    protected int seq_ptr=0;
    protected boolean isNewStart=true;
    
    protected Timer timer=new Timer(1,
              new ActionListener() {
                  public void actionPerformed(ActionEvent e) {
                      if(displayMode==DisplayByLine){
                           oneMoreStoryLine();}
                      else if(displayMode==DisplayByWord){
                           oneMoreStoryChar();}
                  }
              });
;
    protected Vector<Vector<String>> curStory=new Vector<Vector<String>>();
    protected Vector<Vector<String>> curPStory=new Vector<Vector<String>>();
    protected String storyDiscription="";
    protected String pStoryDiscription="";
    protected int storyCharIndex=0;
    protected int pStoryCharIndex=0;
    
    protected static final int DisplayByLine=1;
    protected static final int DisplayByWord=2;
    protected int displayMode=DisplayByWord;
    
    protected static final int SEQLENGTH = 30;
    
    
    /** Creates new form EpisodicTest */
    public EpisodicTest() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 0, 51));
        setForeground(new java.awt.Color(153, 255, 153));

        jPanel1.setBackground(new java.awt.Color(224, 224, 242));
        jPanel1.setForeground(new java.awt.Color(102, 255, 255));
        jPanel1.setAutoscrolls(true);
        jPanel1.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 24));
        jPanel1.setMaximumSize(new java.awt.Dimension(350, 750));
        jPanel1.setPreferredSize(new java.awt.Dimension(350, 700));

        jLabel1.setFont(new java.awt.Font("Bauhaus 93", 3, 24));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("EPISODIC MEMORY MODEL SIMULATION");

        jButton1.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14));
        jButton1.setText("Learning Initially");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
                StartPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Corbel", 0, 12));
        jLabel3.setText("Total Number of Event");

        jLabel4.setFont(new java.awt.Font("Corbel", 0, 12));
        jLabel4.setText("Total Number of Sequence");

        jLabel5.setFont(new java.awt.Font("Corbel", 0, 12));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Unknown");

        jLabel6.setFont(new java.awt.Font("Corbel", 0, 12));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Unknown");

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel7.setText("Results");

        jLabel8.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        jLabel8.setText("Real Event Lists");

        jTextArea1.setBackground(new java.awt.Color(224, 224, 242));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Century", 2, 11)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setBackground(new java.awt.Color(224, 224, 242));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Century", 2, 11)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel10.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel10.setText("PREDICTION ACCURACY");

        jLabel11.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("UNknown");

        jButton2.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jButton2.setText("Show Next Sequence");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jButton3.setText("PaRAMETERS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel12.setText("OPERATIONS");

        jLabel9.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        jLabel9.setText("Predicted  Events");

        jButton4.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jButton4.setText("Toggle Display");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangDispalyMode(evt);
            }
        });

        jTextArea3.setBackground(new java.awt.Color(224, 224, 242));
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel2.setText("Events");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 279, Short.MAX_VALUE)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(369, 369, 369))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 298, Short.MAX_VALUE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)
                                .addGap(37, 37, 37)))
                        .addGap(0, 0, 0)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addComponent(jScrollPane3))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)))
                .addGap(319, 319, 319))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addGap(305, 305, 305)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(344, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addGap(625, 625, 625))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 741, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed

//this method has minor changes by www after 02/12/09
private void StartPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartPressed
// TODO add your handling code here:
    EventListLoad();
    //partialLeEventListLoadngthTest(5,0);
    jLabel5.setText(""+episodic.seqLearner.numF1);
    jLabel6.setText(""+episodic.seqLearner.numCode);
    //System.out.println("Accuracy: " + orderedFullLengthTest() + "%");
    System.out.println("Accuracy: " + orderedPartialLengthTest(partialCueLength=4, this.partialCueBackwards=false));
/*
    System.out.println("Start testing");

    pEvents=new Vector<Event>(0);
    curPSeq=new Vector<Event>(0);
    curSeq=new Vector<Event>(0);

    eventIndex=0;
    //episodic.loadEpisodicModel(eventFile, seqFile);
    if(!isStart){
        initEpisodic();
        loadEvents();
        
        retrain();
        episodic.saveEpisodiceModel(this.eventFile, this.seqFile);
        isStart=true;
    }
    
    jLabel5.setText(""+episodic.seqLearner.numF1);
    jLabel6.setText(""+episodic.seqLearner.numCode);
    
    
    //jTextArea1.setText(getSeqString(events));
    
*/    
    
}//GEN-LAST:event_StartPressed

protected double getPrecision(){
    double err=0;
    for(int i=0;i<pEvents.size();i++){
        err+=pEvents.get(i).getDistance(events.get(i));
    }
    return err/=((double) pEvents.size());
}

protected double getPrecisionPerSeq(){
    double err=0;
    
    if(curPSeq.size()!=curSeq.size()){
        return 0;
    }
    
    for(int i=0;i<curPSeq.size();i++){
        err+=curPSeq.get(i).getDistance(curSeq.get(i));
    }
    return err/=((double) curPSeq.size());
}

protected void loadEvents(){
    
    try{
        events.removeAllElements();
        FileReader fr=new FileReader(eventListFile);
    	Scanner sc=new Scanner(fr);
        while(sc.hasNext()){
            Event e=new Event();
            e.x=sc.nextDouble();
            sc.nextDouble();
            e.z=sc.nextDouble();
            sc.nextDouble();
            e.y=sc.nextDouble();
            sc.nextDouble();
            e.curHealth=sc.nextDouble();
            sc.nextDouble();
            e.hasAmmo=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.emeDistance=sc.nextDouble();
            sc.nextDouble();
            e.reachableItem=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.getHealth=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.getWeapon=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.changeWeapon=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.isShooting=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.behave1=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.behave2=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.behave3=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.behave4=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.reward=sc.nextDouble();
            sc.nextDouble();
            events.add(e);
        }
    	
    }catch (Exception e){
         e.printStackTrace();
         System.out.println("Cannot load event lists!!!");
    }   
}

public String eventDescription(Event e){
    //by Budhitama Subagdja
    String desc = "";
    desc = desc + "At (" + e.x + "," + e.z +") ";
    desc = desc + "Health: " + e.curHealth + " ";
    if(e.emeDistance<1){
        desc = desc + "Enemy Detected! Distance: " + e.emeDistance;
    }
    desc = desc + "\n";
    if(!e.hasAmmo) desc = desc + "|Empty Ammo| ";
    if(e.reachableItem) desc = desc + "|Item detected|";
    if(e.behave1) desc = desc + "|Doing A|";
    if(e.behave2) desc = desc + "|Doing B|";
    if(e.behave3) desc = desc + "|Doing C|";
    if(e.behave4) desc = desc + "|Doing D|";
    if(e.reward >=1){
        desc = desc + "\n";
        desc = desc + "FEELS GOOD!";
    }
    if(e.reward <=0){
        desc = desc + "\n";
        desc = desc + "HURT!";
    }
    return desc;
}

public void eventTextDescription(Event e){
    //by Budhitama Subagdja
    String desc = "";
    desc = desc + "At (" + e.x + "," + e.z +") ";
    desc = desc + "Health: " + e.curHealth + " ";
    if(e.emeDistance<1){
        desc = desc + "Enemy Detected! Distance: " + e.emeDistance;
    }
    jTextArea3.append(desc);
    jTextArea3.append("\n");
    
    desc = "";
    if(!e.hasAmmo) desc = desc + "|Empty Ammo| ";
    if(e.reachableItem) desc = desc + "|Item detected|";
    if(e.behave1) desc = desc + "|Doing A|";
    if(e.behave2) desc = desc + "|Doing B|";
    if(e.behave3) desc = desc + "|Doing C|";
    if(e.behave4) desc = desc + "|Doing D|";
    jTextArea3.append(desc);
    desc="";
    jTextArea3.append("\n");
    if(e.reward >=1){
        desc = "FEELS GOOD!";
    }
    if(e.reward <=0){
        desc = "HURT!";
    }
    jTextArea3.append(desc);
    jTextArea3.append("\n");
    
}


public boolean convertBool(double b){
    if(b>0.0){
        return true;
    }
    else{
        return false;
    }
}

protected Vector<Vector<String>> getStoryString(Vector<Event> eList){
     Vector<Vector<String>> story=new  Vector<Vector<String>>(0);
    
    for(int i=0;i<eList.size();i++){
        if(i==0){
            try {
            story.add(eList.get(i).printStoryBegin(this.isNewStart));
            }catch(Exception e)
            {
                System.out.println("Couldn't get string");
            }
            continue;
        }
        
        else{
            Vector<String> oneEvent=EventDistance.incEDiscption(eList.get(i-1), eList.get(i));
            if(oneEvent.size()!=0){
                 story.add(oneEvent);
            }

        }
    }
     
    return story;
}

protected String getSeqString(Vector<Event> eList){
    String str="";
    
    for(int i=0;i<eList.size();i++){
        str+=eList.get(i).toString();
    }
    return str;
}

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
    testingPartialSeqScenario3();
    //testingPartialSeqScenario2();
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
    RetainPanel rp=new RetainPanel(this);
    
    //rp.main(null);
}//GEN-LAST:event_jButton3ActionPerformed

private void ChangDispalyMode(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangDispalyMode
// TODO add your handling code here:
    if(this.displayMode==DisplayByWord){
        this.displayMode=DisplayByLine;
    }            
    else{
        this.displayMode=DisplayByWord;
    }
}//GEN-LAST:event_ChangDispalyMode




public void testingPartialSeqScenario1(){
    System.out.println("=======================");
    System.out.println("ONE SEQUENCE LEARNT");
    System.out.println("=======================");
    
    for(;eventIndex<events.size();eventIndex++){
        Event e=events.get(eventIndex);
        curSeq.add(e);
        int[] learntSeq=null;
        int curSeqLength=curSeq.size();
        int startIndex=curSeqLength/3;
        if(e.isForcedTer(e)){  
            System.out.println("Sequence Termimated by Battle Consequences");
            System.out.println("Sequence Length="+(eventIndex-curSeq.size()+1)+"~"+eventIndex);
            System.out.println("Contain Identicial Events?"+this.containsIdentical(curSeq));
            
            this.jLabel10.setText("PREDICTION ACCURACY "+"("+(eventIndex-curSeq.size()+1)+"~"+eventIndex+")"+"/("+0+"~"+events.size()+")");
            
            if(curSeqLength<3){
                startIndex=1;
            }
            System.out.println("Testing Partial Sequence Length="+startIndex);
            boolean succeed=true;
            for(int i=0;i<startIndex;i++){
                if(!episodic.newTrainEvent(curSeq.get(i).toArray())){
                    succeed=false;
                }
             }
            
            if(!succeed){
                learntSeq=null;
            }
            else{
                learntSeq=episodic.seqLearner.oneTrainIn();
                
                int index=startIndex;
                while(learntSeq!=null&&learntSeq[0]==-1&&index<curSeqLength){
                    if(!episodic.newTrainEvent(curSeq.get(index).toArray())){
                        learntSeq=null;
                        break;
                    }    
                    learntSeq=episodic.seqLearner.oneTrainIn();
                    index++;
                }
                
                if(learntSeq!=null&&learntSeq[0]==-1){
                    learntSeq=null;
                }
            }
            
            episodic.seqLearner.emptyAccumulated();
             
            if(learntSeq==null){
                System.out.println("Result: Sequence cant be retrieved");
                for(int j=0;j<curSeq.size();j++){
                    pEvents.add(new Event());
                    pEvents.lastElement().setDefault();
                }
                System.out.println("pEvents.length="+pEvents.size());
                
                //this.jTextArea1.setText(getSeqString(curSeq));
                //this.jTextArea2.setText(getSeqString(curPSeq));
                curStory=getStoryString(curSeq);
                curPStory=getStoryString(curPSeq);
                timer.start();
                System.out.println("Learnt Sequence Length="+curPSeq.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
                this.jLabel11.setText(""+getPrecisionPerSeq());
                this.curPSeq.removeAllElements();
                this.curSeq.removeAllElements();                
                eventIndex++;
                
                break;
            }
            
             if(curSeq.size()==learntSeq.length){
                System.out.println("Result: Sequence Learnt with Identicial Length");
                curPSeq=episodic.getSeqEvents(learntSeq);
                for(int j=0;j<curPSeq.size();j++){
                    pEvents.add(curPSeq.get(j));
                }
                System.out.println("pEvents.length="+pEvents.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
            }
            else if(curSeq.size()>learntSeq.length){
                System.out.println("Result: Sequence Learnt with Shorter Length");
                curPSeq=episodic.getSeqEvents(learntSeq);
                for(int j=0;j<curPSeq.size();j++){
                    pEvents.add(curPSeq.get(j));
                }
                System.out.println("Learnt Sequence Length="+curPSeq.size());
                for(int j=0;j<curSeq.size()-learntSeq.length;j++){
                    pEvents.add(new Event());
                    pEvents.lastElement().setDefault();
                }
                System.out.println("pEvents.length="+pEvents.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
            }
            else{
                System.out.println("Result: Sequence Learnt with Longer Length");
                System.out.println("Learnt Sequence Length="+curPSeq.size());
                curPSeq=episodic.getSeqEvents(learntSeq);
                for(int j=0;j<curSeq.size();j++){
                    pEvents.add(curPSeq.get(j));
                }
                System.out.println("pEvents.length="+pEvents.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
            }
            
            //this.jTextArea1.setText(getSeqString(curSeq));
            //this.jTextArea2.setText(getSeqString(curPSeq));
            curStory=getStoryString(curSeq);
            curPStory=getStoryString(curPSeq);
            timer.start();
            this.jLabel11.setText(""+getPrecisionPerSeq());
            this.curPSeq.removeAllElements();
            this.curSeq.removeAllElements();
            eventIndex++;
            break;
        }
    }
    
    if(eventIndex>=events.size()){
        this.jLabel10.setText("PREDICTION ACCURACY (0~"+events.size()+")");
        this.jLabel11.setText(""+this.getPrecision());
    }   
    
}

public void testingPartialSeqScenario2(){
    System.out.println("=======================");
    System.out.println("ONE SEQUENCE LEARNT");
    System.out.println("=======================");
    
    for(;eventIndex<events.size();eventIndex++){
        Event e=events.get(eventIndex);
        curSeq.add(e);
        int[] learntSeq=null;
        int curSeqLength=curSeq.size();
        int startIndex=curSeqLength/3;
        System.out.println("eventIndex: " + eventIndex);
        System.out.println("startIndex: " + startIndex);
        
        if(e.isForcedTer(e)){  
            System.out.println("Sequence Termimated by Battle Consequences");
            System.out.println("Sequence Length="+(eventIndex-curSeq.size()+1)+"~"+eventIndex);
            System.out.println("Contain Identicial Events?"+this.containsIdentical(curSeq));
            
            this.jLabel10.setText("PREDICTION ACCURACY "+"("+(eventIndex-curSeq.size()+1)+"~"+eventIndex+")"+"/("+0+"~"+events.size()+")");
            
            if(curSeqLength<3){
                startIndex=1;
            }
            System.out.println("Testing Partial Sequence Length="+startIndex);
            boolean succeed=true;
            for(int i=0;i<startIndex;i++){
                if(!episodic.newTrainEvent(curSeq.get(i).toArray())){
                    succeed=false;
                }
             }
            /*
            if(!succeed){
                learntSeq=null;
            }
            else{
                learntSeq=episodic.seqLearner.oneTrainIn();
                
                int index=startIndex;
                while(learntSeq!=null&&learntSeq[0]==-1&&index<curSeqLength){
                    if(!episodic.newTrainEvent(curSeq.get(index).toArray())){
                        learntSeq=null;
                        break;
                    }    
                    learntSeq=episodic.seqLearner.oneTrainIn();
                    index++;
                }
                
                if(learntSeq!=null&&learntSeq[0]==-1){
                    learntSeq=null;
                }
            }
            
            episodic.seqLearner.emptyAccumulated();
             
            if(learntSeq==null){
                System.out.println("Result: Sequence cant be retrieved");
                for(int j=0;j<curSeq.size();j++){
                    pEvents.add(new Event());
                    pEvents.lastElement().setDefault();
                }
                System.out.println("pEvents.length="+pEvents.size());
                
                //this.jTextArea1.setText(getSeqString(curSeq));
                //this.jTextArea2.setText(getSeqString(curPSeq));
                curStory=getStoryString(curSeq);
                curPStory=getStoryString(curPSeq);
                timer.start();
                System.out.println("Learnt Sequence Length="+curPSeq.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
                this.jLabel11.setText(""+getPrecisionPerSeq());
                this.curPSeq.removeAllElements();
                this.curSeq.removeAllElements();                
                eventIndex++;
                
                break;
            }
            
             if(curSeq.size()==learntSeq.length){
                System.out.println("Result: Sequence Learnt with Identicial Length");
                curPSeq=episodic.getSeqEvents(learntSeq);
                for(int j=0;j<curPSeq.size();j++){
                    pEvents.add(curPSeq.get(j));
                }
                System.out.println("pEvents.length="+pEvents.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
            }
            else if(curSeq.size()>learntSeq.length){
                System.out.println("Result: Sequence Learnt with Shorter Length");
                curPSeq=episodic.getSeqEvents(learntSeq);
                for(int j=0;j<curPSeq.size();j++){
                    pEvents.add(curPSeq.get(j));
                }
                System.out.println("Learnt Sequence Length="+curPSeq.size());
                for(int j=0;j<curSeq.size()-learntSeq.length;j++){
                    pEvents.add(new Event());
                    pEvents.lastElement().setDefault();
                }
                System.out.println("pEvents.length="+pEvents.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
            }
            else{
                System.out.println("Result: Sequence Learnt with Longer Length");
                System.out.println("Learnt Sequence Length="+curPSeq.size());
                curPSeq=episodic.getSeqEvents(learntSeq);
                for(int j=0;j<curSeq.size();j++){
                    pEvents.add(curPSeq.get(j));
                }
                System.out.println("pEvents.length="+pEvents.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
            }
            
            //this.jTextArea1.setText(getSeqString(curSeq));
            //this.jTextArea2.setText(getSeqString(curPSeq));
            curStory=getStoryString(curSeq);
            curPStory=getStoryString(curPSeq);
            //timer.start();
            //this.jLabel11.setText(""+getPrecisionPerSeq());
            this.curPSeq.removeAllElements();
            this.curSeq.removeAllElements();
            eventIndex++;
            break;
             */
        }
    
     }
    
}

public void EventListLoad(){
//by Budhitama Subagdja    
    System.out.println("Start loading");
    
    events=new Vector<Event>(0);
    pEvents=new Vector<Event>(0);
    curPSeq=new Vector<Event>(0);
    curSeq=new Vector<Event>(0);

    eventIndex=0;
    //episodic.loadEpisodicModel(eventFile, seqFile);
    if(!isStart){
        initEpisodic();
        loadEvents();

        //for(int i=0;i<events.size();i++){
        //    Event e=events.get(i);
        //    System.out.println(e);
        //}
        initTraining();
        
        /*retrain();
        episodic.saveEpisodiceModel(this.eventFile, this.seqFile);*/
        isStart=true;
    }
    
    
    
    //jTextArea1.setText(getSeqString(events));
    
    
}



public void initEpisodic(){
    episodic=new EpisodicModelcc(); 
     for (int i=0;i<numFieldE;i++) {
          inputE[i] = new double [lenE[i]];
     }
     episodic.initEventPara(numFieldE, lenE, betaE, alphaE, gammaE, rhoE);
     episodic.initSeqPara(betaS, alphaS, gammaS, rhoS);
     
}

public void initTraining(){
    //by Budhitama Subagdja
    int previdx = 0; 
    int diffidx = 0;
    int maxseqlimit = SEQLENGTH;
    if(events.isEmpty()){
        System.out.println("ERROR: EMPTY EVENT SET!!");
        return;
    }
    int seqcount=0;
    int curSeqLen=0;
    seqStartIndexes = new ArrayList();
    seqLenIndexes = new ArrayList();
    seqStartIndexes.add(0);
    for(int i=0;i<events.size();i++){
    //for(int i=0;i<12;i++){
        //System.out.println("");
        Event e=events.get(i);
        //System.out.println(e);
        //System.out.println(eventDescription(e)+"\n");
        eventTextDescription(e);       
        episodic.newEvent(e.toArray());
        curSeqLen++;
        //System.out.println("Tho activation: " + episodic.seqLearner.tho);
        if((e.isForcedTer(e))||(episodic.seqLearner.tho<=0.0)){
        //if(curSeqLen>maxseqlimit){
             if(episodic.seqLearner.tho<=0.0)
                System.out.println("REACHING SEQUENCE LIMIT");
             else
                 System.out.println("TERMINATION SIGNAL DETECTED");
             curSeqLen=0;
             seqcount++;
             seqStartIndexes.add(i+1);
             diffidx = (i+1)-previdx;
             seqLenIndexes.add(diffidx);
             System.out.println("Episode length: " + diffidx);
             previdx = i+1;
             System.out.println("Last index: " + (i+1));
             System.out.println("End sequence: " + seqcount);
             System.out.println("F2: " + episodic.seqLearner.sequenceEndWinner());
             episodic.seqLearner.resetCurSeq();
             episodic.seqLearner.resetActivityF1();
             episodic.seqLearner.resetBaseLineTho();
             jTextArea3.append("------------------------------\n\n");

        }
    }
    if(curSeqLen>0){
        seqcount++;
        System.out.println("End sequence: " + seqcount);
        System.out.println("F2: " + episodic.seqLearner.sequenceEndWinner());
        episodic.seqLearner.resetCurSeq();
        episodic.seqLearner.resetActivityF1();
        episodic.seqLearner.resetBaseLineTho();
    }
}

public double orderedFullLengthTest(){
    //by Budhitama Subagdja
    int numTrials = seqStartIndexes.size()-1;
    int sumSuccess = 0;
    for(int t=0;t<numTrials;t++){
        int selidx = ((Integer)seqStartIndexes.get(t)).intValue();
        int epiLen = ((Integer)seqLenIndexes.get(t)).intValue();
        
        int winidx = seqRecognition(selidx,epiLen);
        if(winidx==t){
            sumSuccess++;
        }    
    }
    return (((1.0*sumSuccess)/(1.0*numTrials))*100);
}

public double orderedPartialLengthTest(int len, boolean fromLast){
    //by Budhitama Subagdja
    int numTrials = seqStartIndexes.size()-1;
    int sumSuccess = 0;
    for(int t=0;t<numTrials;t++){
        int selidx = ((Integer)seqStartIndexes.get(t)).intValue();
        int epiLen = ((Integer)seqLenIndexes.get(t)).intValue();
        if(len>epiLen)
            len = epiLen;
        int sidx = 0;
        if(fromLast){
            sidx = epiLen-len;
            if(sidx<0)
                sidx = 0;
            
        }
        System.out.println("IDXs: " + selidx + " " + len + " " + sidx);
        int winidx = seqRecognition(selidx,len,sidx);
        if(winidx==t){
            sumSuccess++;
        }    
    }
    return (((1.0*sumSuccess)/(1.0*numTrials))*100);

}

public double fullLengthTest(){
    //by Budhitama Subagdja
    
    int testTrial = 100;
    //Object seqsidx[] = seqStartIndexes.toArray();
    int seqLen = seqStartIndexes.size()-1;
    if(seqLen<0){
        seqLen = 0;
    }
    System.out.println("seqLen: " + seqLen);
    int sumSuccess = 0;
    for(int i=0;i<testTrial;i++){
        int selidx = (int)(Math.random()*seqLen);
        int epiLen = ((Integer)seqLenIndexes.get(selidx)).intValue();
        System.out.println("Selected index: " + selidx);
        //int winidx = selidx;
        //int winidx = seqRecognition(((Integer)seqStartIndexes.get(selidx)).intValue(),SEQLENGTH);
        int winidx = seqRecognition(((Integer)seqStartIndexes.get(selidx)).intValue(),epiLen);
        System.out.println("Winning index: " + winidx);
        if(winidx==selidx){
            sumSuccess++;
            System.out.println("Matched accurately: " + sumSuccess);
        }
    }
    System.out.println("Accuracy: " + (((1.0*sumSuccess)/(1.0*testTrial))*100) + "%");
    return (((1.0*sumSuccess)/(1.0*testTrial))*100);
}

public double partialLengthTest(int len, int startpos){
    //by Budhitama Subagdja
    int testTrial = 100;
    //Object seqsidx[] = seqStartIndexes.toArray();
    int seqLen = seqStartIndexes.size()-1;
    if(seqLen<0){
        seqLen = 0;
    }
    System.out.println("seqLen: " + seqLen);
    int sumSuccess = 0;
    for(int i=0;i<testTrial;i++){
        int selidx = (int)(Math.random()*seqLen);
        System.out.println("Selected index: " + selidx);
        //int winidx = selidx;
        int winidx = seqRecognition(((Integer)seqStartIndexes.get(selidx)).intValue(),len,startpos);
        System.out.println("Winning index: " + winidx);
        if(winidx==selidx){
            sumSuccess++;
            System.out.println("Matched accurately: " + sumSuccess);
        }
    }
    System.out.println("Accuracy: " + (((1.0*sumSuccess)/(1.0*testTrial))*100) + "%");
    return (((1.0*sumSuccess)/(1.0*testTrial))*100);

}

public int seqRecognition(int startidx, int len){
//by Budhitama Subagdja
    int widx = -1;
    int relidx = 0;
    int absidx = relidx + startidx;
    episodic.seqLearner.resetCurSeq();
    episodic.seqLearner.resetActivityF1();
    episodic.seqLearner.resetBaseLineTho();
    while((relidx<=len)&&(absidx<events.size())){
        Event e=events.get(absidx);
        episodic.newEvent(e.toArray());
        relidx++;
        absidx++;
    }
    widx = episodic.seqLearner.sequenceRecWinner();
    return widx;
}

public int seqRecognition(int startidx, int len, int locidx){
    //by Budhitama Subagdja
    int widx = -1;
    int relidx = 0;
    int absidx = relidx + startidx;
    int lidx = absidx + locidx;
    episodic.seqLearner.resetCurSeq();
    episodic.seqLearner.resetActivityF1();
    episodic.seqLearner.resetBaseLineTho();
    //while((relidx<=len)&&(absidx<events.size())){
    while((lidx<absidx+len)&&(lidx<events.size())){
        Event e=events.get(lidx);
        episodic.newEvent(e.toArray());
        lidx++;
    }
    
    widx = episodic.seqLearner.sequenceRecWinner();
    System.out.println("Sequence WINNNN: " + widx);
    return widx;    
}


public void retrain(){
    int numFieldE_temp=numFieldE;
    int[] lenE_temp=new int[lenE.length];
    System.arraycopy(lenE, 0, lenE_temp, 0, lenE.length);
    double[] betaE_temp=new double[betaE.length];
    System.arraycopy(betaE, 0, betaE_temp, 0, betaE.length);
    double[] alphaE_temp=new double[alphaE.length];
    System.arraycopy(alphaE, 0, alphaE_temp, 0, alphaE.length);
    double[] gammaE_temp=new double[gammaE.length];
    System.arraycopy(gammaE, 0, gammaE_temp, 0, gammaE.length);
    double[] rhoE_temp=new double[rhoE.length];
    System.arraycopy(rhoE, 0, rhoE_temp, 0, rhoE.length);
    double betaS_temp=betaS;
    double alphaS_temp=alphaS;
    double gammaS_temp=gammaS;
    double rhoS_temp=rhoS;
 
    episodic=new EpisodicModelcc(); 
    this.seq_ptr=0;
     for (int i=0;i<numFieldE_temp;i++) {
          inputE[i] = new double [lenE[i]];
     }
     episodic.initEventPara(numFieldE_temp, lenE_temp, betaE_temp, alphaE_temp, gammaE_temp, rhoE_temp);
     episodic.initSeqPara(betaS_temp, alphaS_temp, gammaS_temp, rhoS_temp);
     
     if(events.isEmpty()){
         System.out.println("ERROR: EMPTY EVENT SET!!");
         return;
     }
     
    /* int curSeqLen=0;
     for(int i=0;i<events.size();i++){
         Event e=events.get(i);
         curSeqLen++;
         if(e.isForcedTer(e)){
             episodic.newTermination(e.toArray());
             System.out.println("Sequence length identified: " + curSeqLen);
             curSeqLen=0;
         }
         else{
             episodic.newEvent(e.toArray());
         }
     }*/
     
     this.initTraining();
     
     episodic.saveEpisodiceModel(this.eventFile, this.seqFile);
     
}
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EpisodicTest().setVisible(true);
            }
        });
    }
    
    public boolean containsIdentical(Vector<Event> eList){
        boolean contains=false;
        
        for(int i=0;i<eList.size();i++){
            for(int j=i+1;j<eList.size();j++){
                if(eList.get(i).isEqual(eList.get(j))){
                    System.out.println("Identitical Item="+i+", "+j);
                    return true;
                }    
            }
        }
        
        return contains;
    }
    
    //*****code modified or added by WWW after 02/12/09*****
    
    public void testingPartialSeqScenario3(){
    System.out.println("execute epi_test");
    System.out.println("=======================");
    System.out.println("ONE SEQUENCE LEARNT");
    System.out.println("=======================");
    
     int numTrials = seqStartIndexes.size()-1;
    int sumSuccess = 0;
    int len=this.partialCueLength;
    boolean fromLast=this.partialCueBackwards;
    
        curSeq.removeAllElements();
        curPSeq.removeAllElements();
        
        int selidx = ((Integer)seqStartIndexes.get(this.seq_ptr)).intValue();
        int epiLen = ((Integer)seqLenIndexes.get(this.seq_ptr)).intValue();
        if(len>epiLen)
            len = epiLen;
        int sidx = 0;
        if(fromLast){
            sidx = epiLen-len;
            if(sidx<0)
                sidx = 0;
            
        }
        System.out.println("IDXs: " + selidx + " " + len + " " + sidx);
        
        if(selidx==0){
            this.isNewStart=true;
        }
        else if(events.get(selidx-1).isForcedTer(events.get(selidx-1))){
            this.isNewStart=true;
        }
        else{
            this.isNewStart=false;
        }
        
        //get CurrentSeq list
        for(int i=0;i<epiLen;i++){
            this.curSeq.add(this.events.get(selidx+i));
        }
        
        int winidx = seqRecognition(selidx,len,sidx);
        if(winidx==this.seq_ptr){
            sumSuccess++;
            
        } 
        if(winidx>=0){
           curPSeq=episodic.getSeqEvents(episodic.seqLearner.getOneSeq(winidx));
        }
        
        this.jLabel10.setText("PREDICTION ACCURACY "+"("+selidx+"~"+(selidx+epiLen-1)+")"+"/("+0+"~"+(events.size()-1)+")");
        curStory=getStoryString(curSeq);
        curPStory=getStoryString(curPSeq);
        timer.start();
        
        this.seq_ptr=(this.seq_ptr+1)%numTrials;
    
    /*
    for(;eventIndex<events.size();eventIndex++){
        Event e=events.get(eventIndex);
        curSeq.add(e);
        int[] learntSeq=null;
        int curSeqLength=curSeq.size();
        int startIndex=curSeqLength/3;
        if(e.isForcedTer(e)){  
            System.out.println("Sequence Termimated by Battle Consequences");
            System.out.println("Sequence Length="+(eventIndex-curSeq.size()+1)+"~"+eventIndex);
            System.out.println("Contain Identicial Events?"+this.containsIdentical(curSeq));
            
            this.jLabel10.setText("PREDICTION ACCURACY "+"("+(eventIndex-curSeq.size()+1)+"~"+eventIndex+")"+"/("+0+"~"+events.size()+")");
            
            if(curSeqLength<3){
                startIndex=1;
            }
            System.out.println("Testing Partial Sequence Length="+startIndex);
            boolean succeed=true;
            for(int i=0;i<startIndex;i++){
                if(!episodic.newTrainEvent(curSeq.get(i).toArray())){
                    succeed=false;
                }
             }
            
            if(!succeed){
                learntSeq=null;
            }
            else{
                learntSeq=episodic.seqLearner.oneTrainIn();
                
                int index=startIndex;
                while(learntSeq!=null&&learntSeq[0]==-1&&index<curSeqLength){
                    if(!episodic.newTrainEvent(curSeq.get(index).toArray())){
                        learntSeq=null;
                        break;
                    }    
                    learntSeq=episodic.seqLearner.oneTrainIn();
                    index++;
                }
                
                if(learntSeq!=null&&learntSeq[0]==-1){
                    learntSeq=null;
                }
            }
            
            episodic.seqLearner.emptyAccumulated();
             
            if(learntSeq==null){
                System.out.println("Result: Sequence cant be retrieved");
                for(int j=0;j<curSeq.size();j++){
                    pEvents.add(new Event());
                    pEvents.lastElement().setDefault();
                }
                System.out.println("pEvents.length="+pEvents.size());
                
                //this.jTextArea1.setText(getSeqString(curSeq));
                //this.jTextArea2.setText(getSeqString(curPSeq));
                curStory=getStoryString(curSeq);
                curPStory=getStoryString(curPSeq);
                timer.start();
                System.out.println("Learnt Sequence Length="+curPSeq.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
                this.jLabel11.setText(""+getPrecisionPerSeq());
                this.curPSeq.removeAllElements();
                this.curSeq.removeAllElements();                
                eventIndex++;
                
                break;
            }
            
             if(curSeq.size()==learntSeq.length){
                System.out.println("Result: Sequence Learnt with Identicial Length");
                curPSeq=episodic.getSeqEvents(learntSeq);
                for(int j=0;j<curPSeq.size();j++){
                    pEvents.add(curPSeq.get(j));
                }
                System.out.println("pEvents.length="+pEvents.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
            }
            else if(curSeq.size()>learntSeq.length){
                System.out.println("Result: Sequence Learnt with Shorter Length");
                curPSeq=episodic.getSeqEvents(learntSeq);
                for(int j=0;j<curPSeq.size();j++){
                    pEvents.add(curPSeq.get(j));
                }
                System.out.println("Learnt Sequence Length="+curPSeq.size());
                for(int j=0;j<curSeq.size()-learntSeq.length;j++){
                    pEvents.add(new Event());
                    pEvents.lastElement().setDefault();
                }
                System.out.println("pEvents.length="+pEvents.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
            }
            else{
                System.out.println("Result: Sequence Learnt with Longer Length");
                System.out.println("Learnt Sequence Length="+curPSeq.size());
                curPSeq=episodic.getSeqEvents(learntSeq);
                for(int j=0;j<curSeq.size();j++){
                    pEvents.add(curPSeq.get(j));
                }
                System.out.println("pEvents.length="+pEvents.size());
                System.out.println("Lerant Sequence Length="+(pEvents.size()-curSeq.size())+"~"+(pEvents.size()-1));
            }
            
            //this.jTextArea1.setText(getSeqString(curSeq));
            //this.jTextArea2.setText(getSeqString(curPSeq));
            curStory=getStoryString(curSeq);
            curPStory=getStoryString(curPSeq);
            timer.start();
            this.jLabel11.setText(""+getPrecisionPerSeq());
            this.curPSeq.removeAllElements();
            this.curSeq.removeAllElements();
            eventIndex++;
            break;
        }
    }
    
    if(eventIndex>=events.size()){
        this.jLabel10.setText("PREDICTION ACCURACY (0~"+events.size()+")");
        this.jLabel11.setText(""+this.getPrecision());
    }   
    */
}
    
    
    protected void oneMoreStoryChar(){
        if(curStory.isEmpty()&&curPStory.isEmpty()){
            timer.stop();
            storyDiscription="";
            pStoryDiscription="";
            storyCharIndex=0;
            pStoryCharIndex=0;
            return;
        }
        
        if(!curStory.isEmpty()){
            if(storyCharIndex<curStory.firstElement().firstElement().length()){
                storyDiscription+=curStory.firstElement().firstElement().charAt(storyCharIndex);
                storyCharIndex++;
            }
            else{
                curStory.firstElement().remove(0);
                storyCharIndex=0;
            }    
            if(curStory.firstElement().isEmpty()){
                curStory.remove(0);
                storyCharIndex=0;
            }
        }
        
        if(!curPStory.isEmpty()){
            if(pStoryCharIndex<curPStory.firstElement().firstElement().length()){
                pStoryDiscription+=curPStory.firstElement().firstElement().charAt(pStoryCharIndex);
                pStoryCharIndex++;
            }
            else{
                curPStory.firstElement().remove(0);
                pStoryCharIndex=0;
            }
            if(curPStory.firstElement().isEmpty()){
                curPStory.remove(0);
                pStoryCharIndex=0;
            }
        }
        
        this.jTextArea1.setText(storyDiscription+"_");
        this.jTextArea2.setText(pStoryDiscription+"_");
    }
    
    protected void oneMoreStoryLine(){
        if(curStory.isEmpty()&&curPStory.isEmpty()){
            timer.stop();
            storyDiscription="";
            pStoryDiscription="";
            storyCharIndex=0;
            pStoryCharIndex=0;
            return;
        }
        
        if(!curStory.isEmpty()){
            if(!curStory.firstElement().isEmpty()){
                storyDiscription+=curStory.firstElement().firstElement();
                curStory.firstElement().remove(0);
            }
               
            if(curStory.firstElement().isEmpty()){
                curStory.remove(0);
            }
        }
        
        if(!curPStory.isEmpty()){
            if(!curPStory.firstElement().isEmpty()){
                pStoryDiscription+=curPStory.firstElement().firstElement();
                curPStory.firstElement().remove(0);
            }
                
            if(curPStory.firstElement().isEmpty()){
                curPStory.remove(0);
            }
        }
        
        this.jTextArea1.setText(storyDiscription+"_");
        this.jTextArea2.setText(pStoryDiscription+"_");
    }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables

}
