/*
 * EventExtraction.java
 *
 * Created on December 5, 2009, 11:49 AM
 */

package falcon;

import java.util.*;
import java.io.*;
import java.lang.*;
import javax.swing.Timer; 
import java.awt.event.*;

/**
 *
 * @author  WA0003EN
 */
public class EventExtraction extends javax.swing.JFrame {
    protected String seqFile="seq_learner1.ext";
    protected String eventFile="event_learner1.ext";
    //protected String filePath="D:\\work\\player3\\";
    protected String filePath="/Users/atifsaleem/NetBeansProjects/Falcon_14_05_10_atif/data";
    //protected String filePath="C:\\Documents and Settings\\User\\Desktop\\My Dropbox\\wenwen\\em-modified\\";
    //protected String filePath=System.getProperty("user.dir")+"\\";
    protected String eventListFile=filePath+"event1.ext";
    protected Vector<Event> events;
    protected EpisodicModelcc episodic;
    protected Vector<Event> pEvents;
    protected Vector<Event> curPSeq;
    protected Vector<Event> curSeq;
    protected int eventIndex;
    
    protected ArrayList seqStartIndexes;
    protected ArrayList seqLenIndexes;
    
    protected int numFieldE = 4;
    protected int lenE [] = {6 ,16, 8, 2};
    protected double inputE [][] = new double[numFieldE][];
    
    protected double betaE [] = {(double)0.1, (double)0.1,(double)0.1, (double)0.1};
    protected double alphaE [] = {(double)0.1, (double)0.1,(double)0.1, (double)0.1};
    //protected double gammaE [] = {(double)0.4, (double)0.2,(double)0.2, (double)0.2};
    protected double gammaE [] = {(double)0.1, (double)0.3,(double)0.3, (double)0.3};
    protected double rhoE [] = {(double) 0.6, (double)0.6,(double) 0.6, (double)0.6};
    
    protected double betaS = 1.0;
    protected double alphaS = 0.1;
    protected double gammaS = 1.0;
    protected double rhoS = 1.0;
    
    protected boolean isStart=false;
    protected static final int SEQLENGTH = 30;
    
    Vector<Vector <Integer>> supportEvents=new Vector<Vector <Integer>>(0);
    int keyEPtr=-1;
    double supportThresh=0.03;

    /** Creates new form EventExtraction */
    public EventExtraction() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(224, 224, 242));

        jLabel1.setFont(new java.awt.Font("Bauhaus 93", 3, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("KEY EVENT EXTRACTION");

        jButton1.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jButton1.setText("Learning Initially");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        jLabel3.setText("Total Number of Event");

        jLabel5.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Unknown");

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel7.setText("Results");

        jLabel8.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel8.setText("(-/-)");

        jLabel9.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 14)); // NOI18N
        jLabel9.setText("OPERATION");

        jButton2.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jButton2.setText("PREVIOUS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jButton3.setLabel("NEXT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jButton4.setText("PaRAMETERS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea1.setBackground(new java.awt.Color(224, 224, 242));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Century", 2, 11)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(71, 71, 71)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 366, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
    EventListLoad();
    jLabel5.setText(""+supportEvents.size());
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
   if(keyEPtr<0){
        return;
    }

        keyEPtr=(keyEPtr-1);
        if(keyEPtr<0){
           keyEPtr+=supportEvents.size();
        }
    
    String keyDispt="Key Event Generalized:\n";
    keyDispt+=Event.getEvent(episodic.eventLearner.weight[keyEPtr]).toStringDispt();
    keyDispt+="\n";
    
    keyDispt+=supportEvents.get(keyEPtr).size()+" Supporting Event Instances:\n\n";
    for(int i=0;i<supportEvents.get(keyEPtr).size();i++){
        keyDispt+=events.get(supportEvents.get(keyEPtr).get(i).intValue()).toStringDispt();
        keyDispt+="\n";
    }
    
    jTextArea1.setText(keyDispt);
    jLabel8.setText("("+keyEPtr+"/"+(supportEvents.size()-1)+")");
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
    keyEPtr=(keyEPtr+1)%supportEvents.size();
    
    String keyDispt="Key Event Generalized:\n";
    keyDispt+=Event.getEvent(episodic.eventLearner.weight[keyEPtr]).toStringDispt();
    keyDispt+="\n";
    
    keyDispt+=supportEvents.get(keyEPtr).size()+" Supporting Event Instances:\n\n";
    for(int i=0;i<supportEvents.get(keyEPtr).size();i++){
        keyDispt+=events.get(supportEvents.get(keyEPtr).get(i).intValue()).toStringDispt();
        keyDispt+="\n";
    }
    
    jTextArea1.setText(keyDispt);
    jLabel8.setText("("+keyEPtr+"/"+(supportEvents.size()-1)+")");
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
   KeyRetrainPanel rp=new KeyRetrainPanel(this);
    
}//GEN-LAST:event_jButton4ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EventExtraction().setVisible(true);
            }
        });
    }
    
    public void EventListLoad(){
//by Budhitama Subagdja    
    System.out.println("Start loading");
    
    events=new Vector<Event>(0);
    pEvents=new Vector<Event>(0);
    curPSeq=new Vector<Event>(0);
    curSeq=new Vector<Event>(0);

    eventIndex=0;

    if(!isStart){
        initEpisodic();
        loadEvents();
        initTraining();

        isStart=true;
    }
    
}
    
 public void initEpisodic(){
    episodic=new EpisodicModelcc(); 
     for (int i=0;i<numFieldE;i++) {
          inputE[i] = new double [lenE[i]];
     }
     episodic.initEventPara(numFieldE, lenE, betaE, alphaE, gammaE, rhoE);
     episodic.initSeqPara(betaS, alphaS, gammaS, rhoS);
     
}
 
 protected void loadEvents(){
    
    try{
        events.removeAllElements();
        FileReader fr=new FileReader(eventListFile);
    	Scanner sc=new Scanner(fr);
        while(sc.hasNext()){
            Event e=new Event();
            e.x=sc.nextDouble();
            sc.nextDouble();
            e.z=sc.nextDouble();
            sc.nextDouble();
            e.y=sc.nextDouble();
            sc.nextDouble();
            e.curHealth=sc.nextDouble();
            sc.nextDouble();
            e.hasAmmo=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.emeDistance=sc.nextDouble();
            sc.nextDouble();
            e.reachableItem=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.getHealth=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.getWeapon=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.changeWeapon=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.isShooting=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.behave1=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.behave2=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.behave3=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.behave4=convertBool(sc.nextDouble());
            sc.nextDouble();
            e.reward=sc.nextDouble();
            sc.nextDouble();
            events.add(e);
        }
    	
    }catch (Exception e){
         e.printStackTrace();
         System.out.println("Cannot load event lists!!!");
    }   
}
 
 public boolean convertBool(double b){
    if(b>0.0){
        return true;
    }
    else{
        return false;
    }
}
 
 public void initTraining(){
    //by Budhitama Subagdja
    int previdx = 0; 
    int diffidx = 0;
    int maxseqlimit = SEQLENGTH;
    
    if(events.isEmpty()){
        System.out.println("ERROR: EMPTY EVENT SET!!");
        return;
    }
    int seqcount=0;
    int curSeqLen=0;
    seqStartIndexes = new ArrayList();
    seqLenIndexes = new ArrayList();
    seqStartIndexes.add(0);
    for(int i=0;i<events.size();i++){
        Event e=events.get(i);
        int winCode=episodic.newEventWinner(e.toArray());
        
        if(winCode==supportEvents.size()){
            supportEvents.add(new Vector<Integer>(0));
            supportEvents.get(winCode).add(new Integer(i));
        }
        else if(winCode<supportEvents.size()){
            supportEvents.get(winCode).add(new Integer(i));
        }
        else{
            System.out.println("Pls reconsider the logic!!!!!!!!!");
        }
        
        curSeqLen++;

        if((e.isForcedTer(e))||(episodic.seqLearner.tho<=0.0)){
             if(episodic.seqLearner.tho<=0.0)
                System.out.println("REACHING SEQUENCE LIMIT");
             else
                 System.out.println("TERMINATION SIGNAL DETECTED");
             curSeqLen=0;
             seqcount++;
             seqStartIndexes.add(i+1);
             diffidx = (i+1)-previdx;
             seqLenIndexes.add(diffidx);
             System.out.println("Episode length: " + diffidx);
             previdx = i+1;
             System.out.println("Last index: " + (i+1));
             System.out.println("End sequence: " + seqcount);
             System.out.println("F2: " + episodic.seqLearner.sequenceEndWinner());
             episodic.seqLearner.resetCurSeq();
             episodic.seqLearner.resetActivityF1();
             episodic.seqLearner.resetBaseLineTho();

        }
    }
    if(curSeqLen>0){
        seqcount++;
        System.out.println("End sequence: " + seqcount);
        System.out.println("F2: " + episodic.seqLearner.sequenceEndWinner());
        episodic.seqLearner.resetCurSeq();
        episodic.seqLearner.resetActivityF1();
        episodic.seqLearner.resetBaseLineTho();
    }
    
    evaluateKeys();
}
 
 private void evaluateKeys(){
     for(int i=0;i<supportEvents.size();i++){
         if(supportEvents.get(i).size()<(int)(supportThresh*events.size())){
             supportEvents.remove(i);
             i--;
         }
     }
 }
 
 public void retrain(){
    int numFieldE_temp=numFieldE;
    int[] lenE_temp=new int[lenE.length];
    System.arraycopy(lenE, 0, lenE_temp, 0, lenE.length);
    double[] betaE_temp=new double[betaE.length];
    System.arraycopy(betaE, 0, betaE_temp, 0, betaE.length);
    double[] alphaE_temp=new double[alphaE.length];
    System.arraycopy(alphaE, 0, alphaE_temp, 0, alphaE.length);
    double[] gammaE_temp=new double[gammaE.length];
    System.arraycopy(gammaE, 0, gammaE_temp, 0, gammaE.length);
    double[] rhoE_temp=new double[rhoE.length];
    System.arraycopy(rhoE, 0, rhoE_temp, 0, rhoE.length);
    double betaS_temp=betaS;
    double alphaS_temp=alphaS;
    double gammaS_temp=gammaS;
    double rhoS_temp=rhoS;
 
    episodic=new EpisodicModelcc(); 
    supportEvents=new Vector<Vector <Integer>>(0);
    keyEPtr=-1;
    
     for (int i=0;i<numFieldE_temp;i++) {
          inputE[i] = new double [lenE[i]];
     }
     episodic.initEventPara(numFieldE_temp, lenE_temp, betaE_temp, alphaE_temp, gammaE_temp, rhoE_temp);
     episodic.initSeqPara(betaS_temp, alphaS_temp, gammaS_temp, rhoS_temp);
     
     if(events.isEmpty()){
         System.out.println("ERROR: EMPTY EVENT SET!!");
         return;
     }
     
     
     this.initTraining();
     jLabel5.setText(""+supportEvents.size());
     
     //episodic.saveEpisodiceModel(this.eventFile, this.seqFile);
     
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
